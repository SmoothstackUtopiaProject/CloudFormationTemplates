AWSTemplateFormatVersion: "2010-09-09"
Description: Utopia Airlines Demo Project Microservices Template.

Parameters:
  # Naming & Description
  ApplicationEnvironment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: NameNotSet
  ProjectName:
    Type: String
    Default: UtopiaAirlines

  #Availability
  AvailabilityRegion:
    Type: String
    Default: us-east
  AvailabilityZone:
    Type: String
    Default: 1a

  # RDS Connection Values
  DBPassword:
    Type: String
  DBUrl:
    Type: String
  DBUserName:
    Type: String

  # URI of Elastic Container Repository containing the latest Build Image
  # Looks like: ${AWS_ID}/MyRepositoryProjectFolder/MyServive:${COMMIT_HASH}
  ECRepositoryUri:
    Type: String
    Description: Full URI of Docker Image to run in container
  
  # ID of the Amazon Machine Image utilized (default is Amazon Linux 2 AMI (HVM), SSD Volume Type)
  ImageId:
    Type: String
    Default: ami-08f322702b61d3ac8 # <- custom with Pip, Docker, & Mvn | default -> ami-0742b4e673072066f

  # Minimum number of these instances that must be running
  InstanceMin:
    Type: String
    Default: 1

  # Maximum number of these instances allowed to be running
  InstanceMax:
    Type: String
    Default: 2

  # Type of EC2 utilized (default is t2.micro - free tier eligible)
  InstanceType:
    Type: String
    Default: t2.micro

  # ID of the Security Group allowing/blocking inbound & outbound traffic
  SecurityGroupId:
    Type: String

  # ID of the Subnet within the VPC to deploy to (should be private)
  SubnetId:
    Type: String

  # Amazon Resource Name of the Network Load Balancer
  LoadBalancerARN:
    Type: String

  # ID of the Virtual Private Cloud this Deployment is contained in
  VpcId:
    Type: String

Conditions:
  ProductionBuild: !Equals [!Ref ApplicationEnvironment, prod]
  AirplaneMS: !Equals [!Ref ApplicationName, UtopiaAirplaneMS]
  AirportMS: !Equals [!Ref ApplicationName, UtopiaAirportMS]
  AuthenticationMS: !Equals [!Ref ApplicationName, UtopiaAuthenticationMS]
  BookingMS: !Equals [!Ref ApplicationName, UtopiaBookingMS]
  FlightMS: !Equals [!Ref ApplicationName, UtopiaFlightMS]
  PassengerMS: !Equals [!Ref ApplicationName, UtopiaPassengerMS]
  PaymentMS: !Equals [!Ref ApplicationName, UtopiaPaymentMS]
  RouteMS: !Equals [!Ref ApplicationName, UtopiaRouteMS]
  UserMS: !Equals [!Ref ApplicationName, UtopiaUserMS]

Resources:
  # Auto Scaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate: !Ref EC2LaunchTemplate
      MinSize: !Ref InstanceMin
      MaxSize: !Ref InstanceMax
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Name
          Value: !Join ["-", ["EC2-AutoScalingGroup", !Ref ApplicationName, !Ref ApplicationEnvironment]]

  #Launch Template
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ["-", ["EC2-LaunchTemplate", !Ref ApplicationName, !Ref ApplicationEnvironment]]
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !Ref EC2IamRole
          Name: !Join ["-", ["EC2-IAMRole", !Ref ApplicationName, !Ref ApplicationEnvironment]]
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroupsIds:
        - !Ref SecurityGroupId
      SubnetId: !Ref SubnetId
      Tags: 
        - Key: Project
          Value: !Ref ProjectName
        - Key: Name
          Value: !Join ["-", ["EC2-LaunchTemplate", !Ref ApplicationName, !Ref ApplicationEnvironment]]

  #IAM Role
  EC2IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["EC2-IAMRole", !Ref ApplicationName, !Ref ApplicationEnvironment]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Name
          Value: !Join ["-", ["EC2-IAMRole", !Ref ApplicationName, !Ref ApplicationEnvironment]]

  # Network Load Balancer Listener (forwards specified port from NLB to ASG)
  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupARN: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerARN
      Port: !If [AirplaneMS, 8081,
            !If [AirportMS, 8082,
            !If [AuthenticationMS, 8083,
            !If [BookingMS, 8084,
            !If [FlightMS, 8085, 
            !If [PassengerMS, 8086,
            !If [PaymentMS, 8087,
            !If [RouteMS, 8088,
            !If [UserMS, 8089, 
            80]]]]]]]]]
      Protocol: TCP

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Name: !Join ["-", ["NLB-Target", !Ref ApplicationName, !Ref ApplicationEnvironment]]
      Port: !If [AirplaneMS, 8081,
            !If [AirportMS, 8082,
            !If [AuthenticationMS, 8083,
            !If [BookingMS, 8084,
            !If [FlightMS, 8085, 
            !If [PassengerMS, 8086,
            !If [PaymentMS, 8087,
            !If [RouteMS, 8088,
            !If [UserMS, 8089, 
            80]]]]]]]]]
      Protocol: TCP
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Name
          Value: !Join ["-", ["EC2-TargetGroup", !Ref ApplicationName, !Ref ApplicationEnvironment]]
      TargetType: instance
      VpcId: !Ref VpcId