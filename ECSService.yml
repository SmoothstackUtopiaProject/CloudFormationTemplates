AWSTemplateFormatVersion: "2010-09-09"
Description: Description of your Application/Microservice etc.

# Used to pass parameters from cli to CloudFormation. e.g. You can pass the Environment you are deploying to.
# This is useful to implement conditions.
Parameters:
  ApplicationEnvironment:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
  ECRRepositoryUri:
    Type: String
    Description: Full URI for docker image to run in container
  DBHost:
    Type: String
    Default: utopiaairlines-mysql.clufugeeqpsu.us-east-1.rds.amazonaws.com
  DBPort:
    Type: String
    Default: 3036
  DBName:
    Type: String

Resources:
  AppCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: String
      # Define your cluster's properties

  # Fargate Service
  AppService:
    Type: AWS::ECS::Service # Type of AWS Service
    Properties: # Different services have multiple properties.
      ServiceName: !Ref ApplicationName
      Cluster: !Ref AppCluster # Can be created in this same CFT template
      TaskDefinition: !Ref AppTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: # Can be created in the same CFT template and accessed via !Ref
            - subnetIDA
            - subnetIDB
          SecurityGroups: # Can be created in the same CFT template and accessed via !Ref
            - securityGroup
      LoadBalancers:
        - LoadBalancerName: UtopiaAirlinesLAB
          TargetGroupArn: arn:aws:elasticloadbalancing:us-east-1:466486113081:targetgroup/ECSAirplaneMSTG/fb05b74561471eb8

  # Fargate Task Definition
  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ApplicationName}-${ApplicationEnvironment}
      RequiresCompatibilities:
        - FARGATE
      Memory: "4096"
      Cpu: "2048"
      NetworkMode: awsvpc
      # ExecutionRoleArn: !Sub ${ExecutionRoleArn}
      TaskRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Ref ECRRepositoryUri
          PortMappings:
            - ContainerPort: 8080
              HostPort: 80
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Ref DBUserName
            - Name: DB_PASSWORD
              ValueFrom: !Ref DBUserPassword
          Environment:
            - Name: APPLICATION_NAME
              Value: !Sub ${ApplicationName}
            - Name: APPLICATION_ENVIRONMENT
              Value: !Ref ApplicationEnvironment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DB_URL
              Value:
                !Join [
                  "",
                  [
                    "jdbc:mysql://",
                    !Ref DBHost,
                    ":",
                    !Ref DBPort,
                    "/",
                    !Ref DBName,
                  ],
                ]
          Essential: true
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/smoothstack/${ApplicationName}/${ApplicationEnvironment}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: "true"

  # Role with permissions that a task needs to do its job e.g. kinesis read, dynamo r/w, cloudwatch metrics
  TaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "ECS-TaskPolicy-${ApplicationName}-${ApplicationEnvironment}"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # Cloudwatch monitoring
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
            #RDS
      Roles:
        - !Ref TaskExecutionRole

  #IAM for application container (task)
  TaskExecutionRole:
    Type: AWS::IAM::Role
    # Description: IAM Role for Task
    Properties:
      RoleName: !Sub "ECS-TaskExecutionRole-${ApplicationName}-${ApplicationEnvironment}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
        - Key: ApplicationEnvironment
          Value: !Ref ApplicationEnvironment

  # DB  Values
  DBUserName:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "Workaround for prodviding a json Secret to fargate"
      Name: !Sub "smoothstack/${ApplicationEnvironment}/db-creds-username"
      SecretString: !Sub "{{resolve:secretsmanager:smoothstack/${ApplicationEnvironment}/database-creds:SecretString:username}}"

  DBUserPassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "Workaround for prodviding a json Secret to fargate"
      Name: !Sub "smoothstack/${ApplicationEnvironment}/db-creds-password"
      SecretString: !Sub "{{resolve:secretsmanager:smoothstack/${ApplicationEnvironment}/database-creds:SecretString:password}}"
